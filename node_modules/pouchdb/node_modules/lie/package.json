{
  "name": "lie",
  "version": "2.8.1",
  "description": "A minimal and fast promise implementation",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/calvinmetcalf/lie.git"
  },
  "bugs": {
    "url": "https://github.com/calvinmetcalf/lie/issues"
  },
  "keywords": [
    "lie",
    "promise",
    "async",
    "aplus"
  ],
  "main": "lib/index.js",
  "scripts": {
    "test": "jshint lib/*.js && mocha -R nyan ./test/cover.js",
    "build-js": "browserify -s Promise ./lib/index.js | derequire > ./dist/lie.js",
    "build-min": "uglifyjs ./dist/lie.js -mc > ./dist/lie.min.js",
    "build-nc-js": "browserify -s Lie ./lib/index.js | derequire > ./dist/lie.noConflict.js",
    "build-nc-min": "uglifyjs ./dist/lie.noConflict.js -mc > ./dist/lie.noConflict.min.js",
    "build-nc": "npm run build-nc-js && npm run build-nc-min",
    "build-poly-js": "browserify ./lib/polyfill.js | derequire > ./dist/lie.polyfill.js",
    "build-poly-min": "uglifyjs ./dist/lie.polyfill.js -mc > ./dist/lie.polyfill.min.js",
    "build-poly": "npm run build-poly-js && npm run build-poly-min",
    "build": "npm run build-js && npm run build-min && npm run build-nc && npm run build-poly",
    "cover": "istanbul cover _mocha ./test/cover.js -- -R spec && istanbul check-coverage --lines 100 --function 100 --statements 100 --branches 100",
    "jshint": "jshint lib/*.js",
    "node": "mocha -R spec ./test/cover.js",
    "browser": "browserify test/cover.js > test/browser.js && mocha-phantomjs test/test.html"
  },
  "jam": {
    "main": "dist/lie.js",
    "include": [
      "README.md",
      "LICENSE.txt",
      "dist/lie.js"
    ]
  },
  "devDependencies": {
    "browserify": "^8.0.3",
    "derequire": "^1.2.0",
    "istanbul": "^0.2.6",
    "jshint": "^2.4.4",
    "mocha": "^1.18.0",
    "mocha-phantomjs": "^3.5.0",
    "phantomjs": "^1.9.9",
    "promises-aplus-tests": "calvinmetcalf/promises-tests#phantom",
    "uglify-js": "^2.4.13"
  },
  "dependencies": {
    "immediate": "^3.0.0"
  },
  "contributors": [
    {
      "name": "Ruben Verborgh",
      "email": "ruben.verborgh@gmail.com"
    },
    {
      "name": "Calvin Metcalf",
      "email": "calvin.metcalf@gmail.com"
    },
    {
      "name": "Sam Hocevar",
      "email": "sam@hocevar.net"
    },
    {
      "name": "Christoph Burgmer"
    }
  ],
  "readme": "# lie \n<a href=\"http://promises-aplus.github.com/promises-spec\">\n  <img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\"\n       alt=\"Promises/A+ logo\" title=\"Promises/A+ 1.1 compliant\" align=\"right\" />\n</a> [![Build Status](https://travis-ci.org/calvinmetcalf/lie.svg)](https://travis-ci.org/calvinmetcalf/lie)\n\nlie a small, performant, promise library implementing the [Promises/A+ spec Version 1.1](http://promises-aplus.github.com/promises-spec/).\n\nA originally a fork of [Ruben Verborgh's](https://github.com/RubenVerborgh) library called [promiscuous](https://github.com/RubenVerborgh/promiscuous), version 2.6 and above are forked from [ayepromise](https://github.com/cburgmer/ayepromise) by [Chris Burgmer](https://github.com/cburgmer).\n\n```bash\nnpm install lie\n\n```\n\n```javascript\nvar Promise = require('lie');\n```\n\n## Usage\n\nEither use it with [browserify](http://browserify.org/) (recomended) or grab one of the files from the dist folder\n\n- lie.js/lie.min.js makes 'Promise' available in global scope (or since it's a UMD `Promise` will be availble through a CJS or AMD loader if it's available instead)\n- lie.noConflict.js/lie.noConflict.min.js makes 'Lie' availble in global scope, otherwise they the same as lie.js/lie.min.js\n- lie.polyfill.js/lie.polyfill.min.js adds 'Promise' to the global scope only if it's not already defined (not a UMD).\n\n## API\n\nImpliments the standard ES6 api, \n\n```js\nnew Promise(function(resolve, reject){\n    doSomething(function(err, result) {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(result);\n        }\n    });\n}).then(function (value) {\n    //on success\n}, function (reason) {\n    //on error\n}).catch(function (reason) {\n    //short cut for error handling\n});\n\nPromise.all([\n    //array of promises or values\n]).then(function ([/* array of results */]));\n\nPromise.race([\n    //array of promises or values\n]);\n// either resolve or rejects depending on the first value to do so\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/calvinmetcalf/lie",
  "_id": "lie@2.8.1",
  "dist": {
    "shasum": "1be11001a71ec08d6cd1b8420dd1965ca6bf3ab2"
  },
  "_from": "lie@^2.6.0",
  "_resolved": "https://registry.npmjs.org/lie/-/lie-2.8.1.tgz"
}
